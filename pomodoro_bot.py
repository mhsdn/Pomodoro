import logging
import json
import os
import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "tasks_data.json"
user_tasks = {}
user_settings = {}
user_timers = {}  # user_id (int): asyncio.Task

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def load_data():
    global user_tasks, user_settings
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            try:
                data = json.load(f)
                user_tasks.update(data.get("tasks", {}))
                user_settings.update(data.get("settings", {}))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def save_data():
    try:
        with open(DATA_FILE, 'w') as f:
            json.dump({"tasks": user_tasks, "settings": user_settings}, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# === –ü–æ–º–æ–¥–æ—Ä–æ —Ç–∞–π–º–µ—Ä ===
async def start_pomodoro_timer(uid, context, task_text, duration=25*60):
    try:
        await context.bot.send_message(chat_id=uid, text=f"‚è≥ –ü–æ–º–æ–¥–æ—Ä–æ –Ω–∞—á–∞—Ç: {task_text}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(duration)
        await context.bot.send_message(chat_id=uid, text=f"‚úÖ –ü–æ–º–æ–¥–æ—Ä–æ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ üßò")
    except asyncio.CancelledError:
        await context.bot.send_message(chat_id=uid, text="‚õîÔ∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === –ú–µ–Ω—é ===
def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üçÖ –ü–æ–º–æ–¥–æ—Ä–æ"), KeyboardButton("üìù –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def task_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def manage_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º")]
    ], resize_keyboard=True)

def settings_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ü–æ–º–æ—â—å: /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, üçÖ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–º–æ–¥–æ—Ä–æ.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.message.from_user.id)
    uid_int = int(uid)
    text = update.message.text.strip()
    tasks = user_tasks.setdefault(uid, [])
    menu = context.user_data.get("menu")

    if text == "üçÖ –ü–æ–º–æ–¥–æ—Ä–æ":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.", reply_markup=task_menu())
        else:
            task_list = "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üìù –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:\n{task_list}")
            context.user_data["menu"] = "pomodoro_select"

    elif menu == "pomodoro_select" and text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(tasks):
            task_text = tasks[index]['text']

            # –û—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
            old_timer = user_timers.get(uid_int)
            if old_timer and not old_timer.done():
                old_timer.cancel()

            # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            task = asyncio.create_task(start_pomodoro_timer(uid_int, context, task_text))
            user_timers[uid_int] = task

            await update.message.reply_text(f"üçÖ –ù–∞—á–∏–Ω–∞–µ–º –ü–æ–º–æ–¥–æ—Ä–æ: {task_text}")
            context.user_data["menu"] = None
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

    elif text == "/stop":
        timer = user_timers.get(uid_int)
        if timer and not timer.done():
            timer.cancel()
            await update.message.reply_text("‚õîÔ∏è –ü–æ–º–æ–¥–æ—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")

    elif text == "üìù –ó–∞–¥–∞—á–∏":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.", reply_markup=task_menu())
        else:
            msg = "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=task_menu())
        context.user_data["menu"] = None

    elif text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_menu())

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        context.user_data["menu"] = "add"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")

    elif menu == "add":
        tasks.append({"text": text, "done": False})
        save_data()
        context.user_data["menu"] = None
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=task_menu())

    elif text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            task_list = "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{task_list}")
            context.user_data["menu"] = "edit_select"

    elif menu == "edit_select":
        if text.isdigit():
            index = int(text) - 1
            if 0 <= index < len(tasks):
                context.user_data["edit_index"] = index
                context.user_data["menu"] = "edit_input"
                await update.message.reply_text(f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:\nüìù {tasks[index]['text']}")
            else:
                await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")

    elif menu == "edit_input":
        context.user_data["new_text"] = text
        index = context.user_data.get("edit_index")
        old_text = tasks[index]["text"]
        new_text = text
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="edit_confirm"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")]
        ])
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:\n\nüìé –ë–´–õ–û: {old_text}\n‚úè –°–¢–ê–õ–û: {new_text}",
            reply_markup=keyboard
        )
        context.user_data["menu"] = "edit_confirm"

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        else:
            task_list = "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{task_list}")
            context.user_data["menu"] = "delete_select"

    elif menu == "delete_select":
        if text.isdigit():
            index = int(text) - 1
            if 0 <= index < len(tasks):
                context.user_data["delete_index"] = index
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data="delete_confirm"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")]
                ])
                await update.message.reply_text(
                    f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\nüóë {tasks[index]['text']}?",
                    reply_markup=keyboard
                )
                context.user_data["menu"] = "delete_confirm"
            else:
                await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total = len(tasks)
        done = sum(1 for t in tasks if t.get("done"))
        percent = int((done / total) * 100) if total else 0
        await update.message.reply_text(f"üìä –ì–æ—Ç–æ–≤–æ: {done}/{total} –∑–∞–¥–∞—á ({percent}%)")

    elif text in ["üîô –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º"]:
        context.user_data["menu"] = None
        await update.message.reply_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    else:
        await update.message.reply_text("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    index = context.user_data.get("confirm_index")
    tasks = user_tasks.get(uid, [])

    if query.data == "confirm_done" and index is not None and 0 <= index < len(tasks):
        tasks[index]["done"] = True
        save_data()
        await query.edit_message_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {tasks[index]['text']}")
        context.user_data["menu"] = None

    elif query.data == "cancel_done":
        await query.edit_message_text("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data["menu"] = None

    elif query.data == "edit_confirm":
        index = context.user_data.get("edit_index")
        new_text = context.user_data.get("new_text")
        if index is not None and 0 <= index < len(tasks):
            tasks[index]["text"] = new_text
            save_data()
            await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{new_text}")
        else:
            await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        context.user_data["menu"] = None

    elif query.data == "edit_cancel":
        await query.edit_message_text("‚ùé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data["menu"] = None

    elif query.data == "delete_confirm":
        index = context.user_data.get("delete_index")
        if index is not None and 0 <= index < len(tasks):
            deleted_task = tasks.pop(index)
            save_data()
            await query.edit_message_text(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:\n{deleted_task['text']}")
        else:
            await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        context.user_data["menu"] = None

    elif query.data == "delete_cancel":
        await query.edit_message_text("‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data["menu"] = None

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

    load_data()

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stop", handle_text))  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio

    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except RuntimeError:
        # –ï—Å–ª–∏ loop —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Jupyter)
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
    
