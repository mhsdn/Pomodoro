import logging
import json
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
import openai
from dateutil import parser

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "tasks_data.json"
HISTORY_FILE = "session_history.json"

user_tasks = {}
user_settings = {}
session_history = {}

def ask_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

def load_data():
    global user_tasks, user_settings, session_history
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            user_tasks.update(data.get("tasks", {}))
            user_settings.update(data.get("settings", {}))
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r') as f:
            session_history.update(json.load(f))

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({"tasks": user_tasks, "settings": user_settings}, f)
    with open(HISTORY_FILE, 'w') as f:
        json.dump(session_history, f)

def count_sessions(uid, days):
    now = datetime.utcnow()
    cutoff = now - timedelta(days=days)
    return sum(1 for s in session_history.get(str(uid), []) if datetime.fromisoformat(s["time"]) >= cutoff)

def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üçÖ –ü–æ–º–æ–¥–æ—Ä–æ"), KeyboardButton("üìù –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("ü§ñ –ü–æ–º–æ—â—å –æ—Ç –ò–ò")]
    ], resize_keyboard=True)

def tasks_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def format_due(due):
    try:
        dt = parser.isoparse(due)
        delta = dt - datetime.utcnow()
        hours = int(delta.total_seconds() // 3600)
        if hours <= 0:
            return "(—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫)"
        return f"(—á–µ—Ä–µ–∑ {hours} —á–∞—Å{'–∞' if 2 <= hours <= 4 else '' if hours == 1 else '–æ–≤'})"
    except:
        return ""

async def start_pomodoro_timer(uid, context, task_text):
    settings = user_settings.get(str(uid), {})
    duration = settings.get("duration", 25) * 60
    short_break = settings.get("break_short", 5) * 60
    long_break = settings.get("break_long", 15) * 60

    await context.bot.send_message(chat_id=uid, text=f"‚è≥ –ü–æ–º–æ–¥–æ—Ä–æ –Ω–∞—á–∞—Ç: {task_text}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60} –º–∏–Ω—É—Ç.")
    await asyncio.sleep(duration)

    await context.bot.send_message(chat_id=uid, text="‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    session_history.setdefault(str(uid), []).append({"time": datetime.utcnow().isoformat(), "task": task_text})
    save_data()

    if len(session_history.get(str(uid), [])) % 4 == 0:
        await context.bot.send_message(chat_id=uid, text=f"üí§ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {long_break // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(long_break)
    else:
        await context.bot.send_message(chat_id=uid, text=f"ü•§ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {short_break // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(short_break)

    await context.bot.send_message(chat_id=uid, text="üîî –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.message.from_user.id)
    text = update.message.text.strip()
    tasks = user_tasks.setdefault(uid, [])
    menu = context.user_data.get("menu")

    if text == "üçÖ –ü–æ–º–æ–¥–æ—Ä–æ":
        if not tasks:
            await update.message.reply_text("–ó–∞–¥–∞—á –Ω–µ—Ç.")
        else:
            task_list = "\n".join([f"{i+1}. {'‚úÖ' if t.get('done') else '‚Ä¢'} {t['text']} ‚è≥ {format_due(t.get('due', ''))}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:\n{task_list}")
            context.user_data["menu"] = "pomodoro_select"

    elif text == "üìù –ó–∞–¥–∞—á–∏":
        await update.message.reply_text("üìã –ú–µ–Ω—é –∑–∞–¥–∞—á:", reply_markup=tasks_menu())
        context.user_data["menu"] = "tasks"

    elif context.user_data.get("menu") == "pomodoro_select" and text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(tasks):
            task_text = tasks[index]["text"]
            asyncio.create_task(start_pomodoro_timer(int(uid), context, task_text))
            context.user_data["menu"] = None
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        today = count_sessions(uid, 1)
        week = count_sessions(uid, 7)
        total = len(tasks)
        done = sum(1 for t in tasks if t.get("done"))
        percent = int((done / total) * 100) if total else 0
        await update.message.reply_text(f"üìà –°–µ–≥–æ–¥–Ω—è: {today} | –ù–µ–¥–µ–ª—è: {week} | –ú–µ—Å—è—Ü: {count_sessions(uid, 30)}\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {done}/{total} ({percent}%)")

    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("‚öô –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")]], resize_keyboard=True))

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é":
        context.user_data["menu"] = "set_times"
        await update.message.reply_text("‚è± –í–≤–µ–¥–∏—Ç–µ 25/5/15")

    elif menu == "set_times":
        try:
            work, short, long = map(int, text.split("/"))
            if any(v <= 0 for v in (work, short, long)):
                await update.message.reply_text("‚ùó –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
                return
            user_settings[uid] = {
                "duration": work,
                "break_short": short,
                "break_long": long
            }
            save_data()
            await update.message.reply_text(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n‚è± –†–∞–±–æ—Ç–∞: {work} –º–∏–Ω | –ü–µ—Ä–µ—Ä—ã–≤: {short} –º–∏–Ω | –î–ª–∏–Ω–Ω—ã–π: {long} –º–∏–Ω", reply_markup=main_menu())
            context.user_data["menu"] = None
        except:
            await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 25/5/15")

    elif text == "‚¨Ö –ù–∞–∑–∞–¥":
        context.user_data["menu"] = None
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
        context.user_data["menu"] = "add_task"

    elif menu == "add_task":
        if text:
            user_tasks.setdefault(uid, []).append({"text": text, "done": False})
            save_data()
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=tasks_menu())
        else:
            await update.message.reply_text("‚ùó –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        context.user_data["menu"] = "tasks"

    elif text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É":
        if not tasks:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            task_list = "\n".join([f"{i+1}. {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{task_list}")
            context.user_data["menu"] = "edit_task_select"

    elif menu == "edit_task_select":
        if text.isdigit():
            index = int(text) - 1
            if 0 <= index < len(tasks):
                context.user_data["edit_index"] = index
                await update.message.reply_text("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
                context.user_data["menu"] = "edit_task_text"
            else:
                await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —á–∏—Å–ª–æ–º.")

    elif menu == "edit_task_text":
        index = context.user_data.get("edit_index")
        if index is not None:
            tasks[index]["text"] = text
            save_data()
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=tasks_menu())
        context.user_data["menu"] = "tasks"
        context.user_data.pop("edit_index", None)

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        if not tasks:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{i+1}. {t['text']}", callback_data=f"del_{i}")]
                for i, t in enumerate(tasks)
            ])
            await update.message.reply_text("üóë –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start", reply_markup=main_menu())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)

    if query.data.startswith("del_"):
        index = int(query.data.split("_")[1])
        try:
            removed = user_tasks[uid].pop(index)
            save_data()
            await query.edit_message_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        except IndexError:
            await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Pomodoro –±–æ—Ç.", reply_markup=main_menu())

def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω.")
    load_data()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
