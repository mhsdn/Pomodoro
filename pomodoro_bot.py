# pomodoro_bot_final_with_gpt.py (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥)
# –í–∫–ª—é—á–∞–µ—Ç Pomodoro, –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏, –ø–æ–º–æ—â—å –æ—Ç ChatGPT
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç BOT_TOKEN –∏ OPENAI_API_KEY —á–µ—Ä–µ–∑ .env

import logging
import json
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import openai

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "tasks_data.json"
HISTORY_FILE = "session_history.json"

user_tasks = {}
user_settings = {}
user_timers = {}
user_sessions = {}
session_history = {}

def ask_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

def load_data():
    global user_tasks, user_settings, session_history
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            try:
                data = json.load(f)
                user_tasks.update(data.get("tasks", {}))
                user_settings.update(data.get("settings", {}))
            except: pass
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r') as f:
            try:
                session_history.update(json.load(f))
            except: pass

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({"tasks": user_tasks, "settings": user_settings}, f)
    with open(HISTORY_FILE, 'w') as f:
        json.dump(session_history, f)

def count_sessions(uid, days):
    now = datetime.utcnow()
    cutoff = now - timedelta(days=days)
    return sum(1 for s in session_history.get(str(uid), []) if datetime.fromisoformat(s["time"]) >= cutoff)

def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üçÖ –ü–æ–º–æ–¥–æ—Ä–æ"), KeyboardButton("üìù –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("ü§ñ –ü–æ–º–æ—â—å –æ—Ç –ò–ò")]
    ], resize_keyboard=True)

def task_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

async def start_pomodoro_timer(uid, context, task_text):
    settings = user_settings.get(str(uid), {})
    duration = settings.get("duration", 25) * 60
    short_break = settings.get("break_short", 5) * 60
    long_break = settings.get("break_long", 15) * 60

    user_sessions.setdefault(uid, 0)
    user_sessions[uid] += 1

    try:
        await context.bot.send_message(chat_id=uid, text=f"""‚è≥ –ü–æ–º–æ–¥–æ—Ä–æ –Ω–∞—á–∞—Ç: {task_text}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60} –º–∏–Ω—É—Ç.""')
        await asyncio.sleep(duration)
        await context.bot.send_message(chat_id=uid, text="‚úÖ –ü–æ–º–æ–¥–æ—Ä–æ –∑–∞–≤–µ—Ä—à—ë–Ω!")

        now = datetime.utcnow().isoformat()
        session_history.setdefault(str(uid), []).append({"time": now, "task": task_text}")
        save_data()

        if user_sessions[uid] % 4 == 0:
            await context.bot.send_message(chat_id=uid, text=f"üí§ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {long_break // 60} –º–∏–Ω—É—Ç.")
            await asyncio.sleep(long_break)
        else:
            await context.bot.send_message(chat_id=uid, text=f"ü•§ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {short_break // 60} –º–∏–Ω—É—Ç.")
            await asyncio.sleep(short_break)

        await context.bot.send_message(chat_id=uid, text="üîî –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!")
    except asyncio.CancelledError:
        await context.bot.send_message(chat_id=uid, text="‚õîÔ∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.message.from_user.id)
    uid_int = int(uid)
    text = update.message.text.strip()
    tasks = user_tasks.setdefault(uid, [])
    menu = context.user_data.get("menu")

    if text == "üçÖ –ü–æ–º–æ–¥–æ—Ä–æ":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.")
        else:
            task_list = "
".join([f"{i+1}. {'‚úÖ' if t.get('done') else '‚Ä¢'} {t['text']} ‚è≥ –¥–æ {t.get('due', '–±–µ–∑ —Å—Ä–æ–∫–∞')}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:
{task_list}")
            context.user_data["menu"] = "pomodoro_select"

    elif menu == "pomodoro_select" and text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(tasks):
            task_text = tasks[index]["text"]
            old_timer = user_timers.get(uid_int)
            if old_timer and not old_timer.done():
                old_timer.cancel()
            task = asyncio.create_task(start_pomodoro_timer(uid_int, context, task_text))
            user_timers[uid_int] = task
            await update.message.reply_text(f"üçÖ –ù–∞—á–∏–Ω–∞–µ–º: {task_text}")
            context.user_data["menu"] = None
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

    elif text == "üìù –ó–∞–¥–∞—á–∏":
        task_list = "
".join([f"{i+1}. {'‚úÖ' if t.get('done') else '‚Ä¢'} {t['text']} ‚è≥ –¥–æ {t.get('due', '–Ω–µ—Ç')}" for i, t in enumerate(tasks)])
        await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:
{task_list}", reply_markup=task_menu())
        context.user_data["menu"] = "task_menu"

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        context.user_data["menu"] = "add_task"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

    elif menu == "add_task":
        context.user_data["new_task_text"] = text
        context.user_data["menu"] = "add_due"
        await update.message.reply_text("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏?")

    elif menu == "add_due":
        try:
            hours = int(text)
            due_time = (datetime.utcnow() + timedelta(hours=hours)).isoformat()
            tasks.append({"text": context.user_data["new_task_text"], "done": False, "due": due_time})
            save_data()
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º!", reply_markup=task_menu())
            context.user_data["menu"] = "task_menu"
        except:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        today = count_sessions(uid, 1)
        week = count_sessions(uid, 7)
        month = count_sessions(uid, 30)
        total = len(tasks)
        done = sum(1 for t in tasks if t.get("done"))
        percent = int((done / total) * 100) if total else 0
        await update.message.reply_text(
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–°–µ–≥–æ–¥–Ω—è: {today} —Å–µ—Å—Å–∏–π
–ù–µ–¥–µ–ª—è: {week}
–ú–µ—Å—è—Ü: {month}

üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {done}/{total} ({percent}%)"
        )

    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        context.user_data["menu"] = "set_all"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 25/5/15")

    elif menu == "set_all":
        try:
            session, short, long = map(int, text.split("/"))
            user_settings[uid] = {
                "duration": session,
                "break_short": short,
                "break_long": long
            }
            save_data()
            await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_menu())
            context.user_data["menu"] = None
        except:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 25/5/15")

    elif text == "ü§ñ –ü–æ–º–æ—â—å –æ—Ç –ò–ò":
        if not tasks:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É.")
        else:
            tasks_text = "
".join([f"{i+1}. {t['text']}" for i, t in enumerate(tasks)])
            gpt_input = f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á:
{tasks_text}

–° —á–µ–≥–æ –ª—É—á—à–µ –Ω–∞—á–∞—Ç—å –∏ –ø–æ—á–µ–º—É?"
            reply = ask_gpt(gpt_input)
            await update.message.reply_text(reply)

    elif text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["menu"] = None
        await update.message.reply_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    else:
        await update.message.reply_text("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    load_data()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
