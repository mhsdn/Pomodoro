import logging
import json
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "tasks_data.json"
HISTORY_FILE = "session_history.json"

user_tasks = {}
user_settings = {}
user_timers = {}
user_sessions = {}
session_history = {}

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def load_data():
    global user_tasks, user_settings, session_history
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            try:
                data = json.load(f)
                user_tasks.update(data.get("tasks", {}))
                user_settings.update(data.get("settings", {}))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r') as f:
            try:
                session_history.update(json.load(f))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def save_data():
    try:
        with open(DATA_FILE, 'w') as f:
            json.dump({"tasks": user_tasks, "settings": user_settings}, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    try:
        with open(HISTORY_FILE, 'w') as f:
            json.dump(session_history, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# === –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def count_sessions(uid, days):
    now = datetime.utcnow()
    cutoff = now - timedelta(days=days)
    sessions = session_history.get(str(uid), [])
    return sum(1 for s in sessions if datetime.fromisoformat(s["time"]) >= cutoff)

# === –¢–∞–π–º–µ—Ä Pomodoro ===
async def start_pomodoro_timer(uid, context, task_text):
    settings = user_settings.get(str(uid), {})
    duration = settings.get("duration", 25) * 60
    short_break = settings.get("break_short", 5) * 60
    long_break = settings.get("break_long", 15) * 60

    user_sessions.setdefault(uid, 0)
    user_sessions[uid] += 1

    try:
        await context.bot.send_message(chat_id=uid, text=f"‚è≥ –ü–æ–º–æ–¥–æ—Ä–æ –Ω–∞—á–∞—Ç: {task_text}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(duration)
        await context.bot.send_message(chat_id=uid, text="‚úÖ –ü–æ–º–æ–¥–æ—Ä–æ –∑–∞–≤–µ—Ä—à—ë–Ω!")

        now = datetime.utcnow().isoformat()
        session_history.setdefault(str(uid), []).append({"time": now, "task": task_text})
        save_data()

        if user_sessions[uid] % 4 == 0:
            await context.bot.send_message(chat_id=uid, text=f"üí§ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {long_break // 60} –º–∏–Ω—É—Ç.")
            await asyncio.sleep(long_break)
        else:
            await context.bot.send_message(chat_id=uid, text=f"ü•§ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {short_break // 60} –º–∏–Ω—É—Ç.")
            await asyncio.sleep(short_break)

        await context.bot.send_message(chat_id=uid, text="üîî –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!")

    except asyncio.CancelledError:
        await context.bot.send_message(chat_id=uid, text="‚õîÔ∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üçÖ –ü–æ–º–æ–¥–æ—Ä–æ"), KeyboardButton("üìù –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.message.from_user.id)
    uid_int = int(uid)
    text = update.message.text.strip()
    tasks = user_tasks.setdefault(uid, [])
    menu = context.user_data.get("menu")

    if text == "üçÖ –ü–æ–º–æ–¥–æ—Ä–æ":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.")
        else:
            task_list = "\n".join([f"{i+1}. {'‚úÖ' if t.get('done') else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:\n{task_list}")
            context.user_data["menu"] = "pomodoro_select"

    elif menu == "pomodoro_select" and text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(tasks):
            task_text = tasks[index]["text"]
            old_timer = user_timers.get(uid_int)
            if old_timer and not old_timer.done():
                old_timer.cancel()
            task = asyncio.create_task(start_pomodoro_timer(uid_int, context, task_text))
            user_timers[uid_int] = task
            await update.message.reply_text(f"üçÖ –ù–∞—á–∏–Ω–∞–µ–º: {task_text}")
            context.user_data["menu"] = None
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

    elif text == "/stop":
        timer = user_timers.get(uid_int)
        if timer and not timer.done():
            timer.cancel()
            await update.message.reply_text("‚õîÔ∏è –ü–æ–º–æ–¥–æ—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        today = count_sessions(uid, 1)
        week = count_sessions(uid, 7)
        month = count_sessions(uid, 30)
        await update.message.reply_text(
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–°–µ–≥–æ–¥–Ω—è: {today} —Å–µ—Å—Å–∏–π\n–ó–∞ –Ω–µ–¥–µ–ª—é: {week} —Å–µ—Å—Å–∏–π\n–ó–∞ –º–µ—Å—è—Ü: {month} —Å–µ—Å—Å–∏–π"
        )

    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        context.user_data["menu"] = "settings"
        await update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n1 ‚Äî –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏\n2 ‚Äî –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤\n3 ‚Äî –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤",
        )

    elif menu == "settings":
        if text == "1":
            context.user_data["menu"] = "set_duration"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
        elif text == "2":
            context.user_data["menu"] = "set_short_break"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
        elif text == "3":
            context.user_data["menu"] = "set_long_break"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")

    elif menu in {"set_duration", "set_short_break", "set_long_break"}:
        if text.isdigit():
            mins = int(text)
            key = {
                "set_duration": "duration",
                "set_short_break": "break_short",
                "set_long_break": "break_long"
            }[menu]
            user_settings.setdefault(uid, {})[key] = mins
            save_data()
            await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {mins} –º–∏–Ω—É—Ç.", reply_markup=main_menu())
            context.user_data["menu"] = None
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    else:
        await update.message.reply_text("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start")

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    load_data()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
    
