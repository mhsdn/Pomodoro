import logging
import json
import os
import asyncio
# import openai  # ‚Üê –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
# openai.api_key = os.getenv("OPENAI_API_KEY")  # ‚Üê –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "tasks_data.json"
user_tasks = {}
user_settings = {}
user_timers = {}

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def load_data():
    global user_tasks, user_settings
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            try:
                data = json.load(f)
                user_tasks.update(data.get("tasks", {}))
                user_settings.update(data.get("settings", {}))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def save_data():
    try:
        with open(DATA_FILE, 'w') as f:
            json.dump({"tasks": user_tasks, "settings": user_settings}, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# === –¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ ===
async def start_pomodoro_timer(uid, context, task_text):
    duration = user_settings.get(str(uid), {}).get("duration", 25) * 60
    try:
        await context.bot.send_message(chat_id=uid, text=f"‚è≥ –ü–æ–º–æ–¥–æ—Ä–æ –Ω–∞—á–∞—Ç: {task_text}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(duration)
        await context.bot.send_message(chat_id=uid, text="‚úÖ –ü–æ–º–æ–¥–æ—Ä–æ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ üßò")
    except asyncio.CancelledError:
        await context.bot.send_message(chat_id=uid, text="‚õîÔ∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === –ú–µ–Ω—é ===
def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üçÖ –ü–æ–º–æ–¥–æ—Ä–æ"), KeyboardButton("üìù –ó–∞–¥–∞—á–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("ü§ñ –ü–æ–º–æ—â—å –æ—Ç –ò–ò")]
    ], resize_keyboard=True)

def task_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def manage_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º")]
    ], resize_keyboard=True)

def settings_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.message.from_user.id)
    uid_int = int(uid)
    text = update.message.text.strip()
    tasks = user_tasks.setdefault(uid, [])
    menu = context.user_data.get("menu")

    if text == "üçÖ –ü–æ–º–æ–¥–æ—Ä–æ":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.", reply_markup=task_menu())
        else:
            task_list = "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üìù –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:\n{task_list}")
            context.user_data["menu"] = "pomodoro_select"

    elif menu == "pomodoro_select" and text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(tasks):
            task_text = tasks[index]['text']
            old_timer = user_timers.get(uid_int)
            if old_timer and not old_timer.done():
                old_timer.cancel()
            task = asyncio.create_task(start_pomodoro_timer(uid_int, context, task_text))
            user_timers[uid_int] = task
            await update.message.reply_text(f"üçÖ –ù–∞—á–∏–Ω–∞–µ–º: {task_text}")
            context.user_data["menu"] = None
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

    elif text == "/stop":
        timer = user_timers.get(uid_int)
        if timer and not timer.done():
            timer.cancel()
            await update.message.reply_text("‚õîÔ∏è –ü–æ–º–æ–¥–æ—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")

    elif text == "üìù –ó–∞–¥–∞—á–∏":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.", reply_markup=task_menu())
        else:
            msg = "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚Ä¢'} {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{msg}", reply_markup=task_menu())
        context.user_data["menu"] = None

    elif text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_menu())

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        context.user_data["menu"] = "add"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")

    elif menu == "add":
        tasks.append({"text": text, "done": False})
        save_data()
        context.user_data["menu"] = None
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=task_menu())

    elif text == "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.")
        else:
            task_list = "\n".join([f"{i+1}. {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:\n{task_list}")
            context.user_data["menu"] = "edit_select"

    elif menu == "edit_select":
        if text.isdigit():
            index = int(text) - 1
            if 0 <= index < len(tasks):
                context.user_data["edit_index"] = index
                context.user_data["menu"] = "edit_input"
                await update.message.reply_text(f"‚úè –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ({tasks[index]['text']}):")
            else:
                await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")

    elif menu == "edit_input":
        index = context.user_data.get("edit_index")
        tasks[index]["text"] = text
        save_data()
        await update.message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.")
        context.user_data["menu"] = None

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.")
        else:
            task_list = "\n".join([f"{i+1}. {t['text']}" for i, t in enumerate(tasks)])
            await update.message.reply_text(f"üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:\n{task_list}")
            context.user_data["menu"] = "delete_select"

    elif menu == "delete_select":
        if text.isdigit():
            index = int(text) - 1
            if 0 <= index < len(tasks):
                deleted = tasks.pop(index)
                save_data()
                await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {deleted['text']}")
                context.user_data["menu"] = None
            else:
                await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total = len(tasks)
        done = sum(1 for t in tasks if t.get("done"))
        percent = int((done / total) * 100) if total else 0
        await update.message.reply_text(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}/{total} ({percent}%)")

    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=settings_menu())

    elif text == "‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è":
        context.user_data["menu"] = "set_timer_duration"
        await update.message.reply_text("‚è± –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):")

    elif menu == "set_timer_duration":
        if text.isdigit():
            minutes = int(text)
            if 1 <= minutes <= 120:
                user_settings.setdefault(uid, {})["duration"] = minutes
                save_data()
                await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {minutes} –º–∏–Ω—É—Ç.", reply_markup=main_menu())
                context.user_data["menu"] = None
            else:
                await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 120.")
        else:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    elif text == "ü§ñ –ü–æ–º–æ—â—å –æ—Ç –ò–ò":
        context.user_data["menu"] = "ai_help"
        await update.message.reply_text("üß† –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n‚Äî –ö–∞–∫ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è?\n‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–µ '—ç–∫–∑–∞–º–µ–Ω'")

    elif menu == "ai_help":
        query = text.lower()

        # –ü—Ä–∏–º–µ—Ä—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü" in query:
            response = "üßò –ß—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é: —É–±–µ—Ä–∏ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É Pomodoro, –Ω–∞—á–Ω–∏ —Å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏."
        elif "—ç–∫–∑–∞–º–µ–Ω" in query:
            response = "üìö –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–µ '—ç–∫–∑–∞–º–µ–Ω':\n1. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—ã\n2. –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã\n3. –°–æ—Å—Ç–∞–≤–∏—Ç—å —à–ø–∞—Ä–≥–∞–ª–∫—É\n4. –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤"
        else:
            response = "ü§ñ –ó–∞–≥–ª—É—à–∫–∞: –ø–æ–¥–∫–ª—é—á–∏ OpenAI –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."

            # –î–ª—è OpenAI ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
            # completion = openai.ChatCompletion.create(
            #     model="gpt-3.5-turbo",
            #     messages=[
            #         {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."},
            #         {"role": "user", "content": text}
            #     ]
            # )
            # response = completion.choices[0].message.content

        await update.message.reply_text(response)
        context.user_data["menu"] = None

    elif text in ["üîô –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º"]:
        context.user_data["menu"] = None
        await update.message.reply_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    else:
        await update.message.reply_text("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    load_data()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stop", handle_text))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
    
